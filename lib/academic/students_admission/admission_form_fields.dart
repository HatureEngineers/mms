import 'package:flutter/material.dart';
import '../../widgets/date_button.dart';
import 'admission_form_buttons.dart';
import 'students_address.dart';

class FormFields extends StatefulWidget {
  const FormFields({super.key});

  @override
  _FormFieldsState createState() => _FormFieldsState();
}

class _FormFieldsState extends State<FormFields> {
  final TextEditingController dateController = TextEditingController();
  final TextEditingController dobController = TextEditingController();
  final TextEditingController ageController = TextEditingController();
  bool isGorib = false;
  bool isEtim = false;
  bool isProtibondhi = false;
  String? residenceType;

  @override
  void initState() {
    super.initState();
    dateController.text =
        "${DateTime.now().day}-${DateTime.now().month}-${DateTime.now().year}";
  }

  // ‚úÖ ‡¶ö‡ßá‡¶ï‡¶¨‡¶ï‡ßç‡¶∏ ‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶æ‡¶∞
  Widget _buildCheckbox(String title, bool value, Function(bool?) onChanged) {
    return CheckboxListTile(
      title: Text(title, style: const TextStyle(fontSize: 14.0)),
      value: value,
      onChanged: onChanged,
      controlAffinity: ListTileControlAffinity.leading, // ‡¶¨‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ö‡ßá‡¶ï‡¶¨‡¶ï‡ßç‡¶∏ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    );
  }

  // ‚úÖ ‡¶∞‡ßá‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶æ‡¶∞
  Widget _buildRadio(String title, String value) {
    return RadioListTile<String>(
      title: Text(title, style: const TextStyle(fontSize: 14.0)),
      value: value,
      groupValue: residenceType,
      onChanged: (val) => setState(() => residenceType = val),
      controlAffinity: ListTileControlAffinity.leading, // ‡¶¨‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶∞‡ßá‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    );
  }

  void _calculateAge(DateTime birthDate) {
    DateTime today = DateTime.now();
    int age = today.year - birthDate.year;
    if (today.month < birthDate.month ||
        (today.month == birthDate.month && today.day < birthDate.day)) {
      age--;
    }
    ageController.text = age.toString();
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(3.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡¶≤‡¶æ‡¶Æ
            Expanded(
              child: Card(
                elevation: 4.0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // ‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // ‚úÖ ‡¶°‡¶æ‡¶® ‡¶™‡¶æ‡¶∂ (‡¶õ‡¶¨‡¶ø)
                          Expanded(
                            flex: 1, // ‡¶°‡¶æ‡¶® ‡¶™‡¶æ‡¶∂ ‡ß®‡ß´% ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶®‡ßá‡¶¨‡ßá
                            child: Card(
                              elevation: 4.0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12.0),
                              ),
                              child: const SizedBox(
                                height: 120, // ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ
                                child: Center(
                                  child: Icon(Icons.person, size: 50, color: Colors.blue), // ‚úÖ ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶Ü‡¶á‡¶ï‡¶®
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 3.0),
                          // ‚úÖ ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂ (‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ, ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶ß‡¶∞‡¶®, ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó)
                          Expanded(
                            flex: 3, // ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂ ‡ß≠‡ß´% ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶®‡ßá‡¶¨‡ßá
                            child: Card(
                              elevation: 4.0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12.0),
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    // üîπ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ
                                    TextField(
                                      controller: dateController,
                                      readOnly: true,
                                      style: const TextStyle(fontSize: 14.0, height: 1.0),
                                      decoration: InputDecoration(
                                        labelText: "‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ",
                                        labelStyle: const TextStyle(fontSize: 13.0),
                                        filled: true,
                                        fillColor: Colors.blue[50],
                                        contentPadding: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 8.0),
                                        border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0)),
                                        suffixIcon: const Icon(Icons.calendar_month_sharp, color: Colors.blue, size: 20),
                                      ),
                                      onTap: () => showModernDatePicker(context: context, controller: dateController),
                                    ),

                                    const SizedBox(height: 10.0),

                                    // üîπ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶ß‡¶∞‡¶® ‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó
                                    Row(
                                      children: [
                                        Expanded(
                                          child: Row(
                                            children: [
                                              const Text(
                                                "‡¶ß‡¶∞‡¶®‡¶É ",
                                                style: TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold),
                                              ),
                                              Expanded(
                                                child: Container(
                                                  height: 35, // ‚úÖ **‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá**
                                                  padding: const EdgeInsets.symmetric(horizontal: 8),
                                                  decoration: BoxDecoration(
                                                    color: Colors.blue[50],
                                                    borderRadius: BorderRadius.circular(8),
                                                    border: Border.all(color: Colors.blue, width: 1),
                                                  ),
                                                  child: DropdownButtonHideUnderline(
                                                    child: DropdownButton<String>(
                                                      isExpanded: true,
                                                      value: '‡¶®‡¶§‡ßÅ‡¶®',
                                                      items: const [
                                                        DropdownMenuItem(
                                                          value: '‡¶®‡¶§‡ßÅ‡¶®',
                                                          child: Text('‡¶®‡¶§‡ßÅ‡¶®', style: TextStyle(color: Colors.black, fontSize: 14)), // ‚úÖ **‡¶ï‡¶æ‡¶≤‡ßã ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ì ‡¶õ‡ßã‡¶ü ‡¶´‡¶®‡ßç‡¶ü**
                                                        ),
                                                        DropdownMenuItem(
                                                          value: '‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶®',
                                                          child: Text('‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶®', style: TextStyle(color: Colors.black, fontSize: 14)),
                                                        ),
                                                      ],
                                                      onChanged: (value) {

                                                      },
                                                      style: const TextStyle(color: Colors.black, fontSize: 11),
                                                      dropdownColor: Colors.blue[50],
                                                      icon: const Icon(Icons.arrow_drop_down, color: Colors.black, size: 18), // ‚úÖ **‡¶õ‡ßã‡¶ü ‡¶Ü‡¶á‡¶ï‡¶®**
                                                    ),
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        const SizedBox(width: 2.0),
                                        Expanded(
                                          child: Row(
                                            children: [
                                              const Text(
                                                "‡¶≤‡¶ø‡¶ô‡ßç‡¶ó‡¶É ",
                                                style: TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold),
                                              ),
                                              Expanded(
                                                child: Container(
                                                  height: 35, // ‚úÖ **‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá**
                                                  padding: const EdgeInsets.symmetric(horizontal: 8),
                                                  decoration: BoxDecoration(
                                                    color: Colors.blue[50],
                                                    borderRadius: BorderRadius.circular(8),
                                                    border: Border.all(color: Colors.blue, width: 1),
                                                  ),
                                                  child: DropdownButtonHideUnderline(
                                                    child: DropdownButton<String>(
                                                      isExpanded: true,
                                                      value: '‡¶õ‡ßá‡¶≤‡ßá',
                                                      items: const [
                                                        DropdownMenuItem(
                                                          value: '‡¶õ‡ßá‡¶≤‡ßá',
                                                          child: Text('‡¶õ‡ßá‡¶≤‡ßá', style: TextStyle(color: Colors.black, fontSize: 14)),
                                                        ),
                                                        DropdownMenuItem(
                                                          value: '‡¶Æ‡ßá‡ßü‡ßá',
                                                          child: Text('‡¶Æ‡ßá‡ßü‡ßá', style: TextStyle(color: Colors.black, fontSize: 14)),
                                                        ),
                                                      ],
                                                      onChanged: (value) {

                                                      },
                                                      style: const TextStyle(color: Colors.black, fontSize: 14),
                                                      dropdownColor: Colors.blue[50],
                                                      icon: const Icon(Icons.arrow_drop_down, color: Colors.black, size: 18), // ‚úÖ **‡¶õ‡ßã‡¶ü ‡¶Ü‡¶á‡¶ï‡¶®**
                                                    ),
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 5.0),

                      // ‡¶®‡¶æ‡¶Æ ‡¶´‡¶ø‡¶≤‡ßç‡¶°
                      _buildTextField(
                          label: '‡¶¶‡¶æ‡¶ñ‡ßá‡¶≤‡¶æ', hint: '‡¶¶‡¶æ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                      _buildTextField(
                          label: '‡¶®‡¶æ‡¶Æ', hint: '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                      _buildTextField(
                          label: '‡¶ú‡¶®‡ßç‡¶Æ-‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶®', hint: '‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                      const SizedBox(height: 3.0),
                      Row(
                        children: [
                          Expanded(
                            flex: 3,
                            child: TextField(
                              controller: dobController,
                              readOnly: true,
                              style: const TextStyle(fontSize: 14.0, height: 1.0), // ‚úÖ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡¶æ
                              decoration: InputDecoration(
                                labelText: "‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ",
                                hintText: "dd-mm-yyyy",
                                labelStyle: const TextStyle(fontSize: 15.0), // ‚úÖ ‡¶≤‡ßá‡¶¨‡ßá‡¶≤ ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡¶æ
                                isDense: true,
                                filled: true,
                                fillColor: Colors.blue[50],
                                contentPadding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
                                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
                                suffixIcon: const Icon(Icons.calendar_month_sharp, color: Colors.blue, size: 20),
                              ),
                              onTap: () async {
                                DateTime? pickedDate = await showDatePicker(
                                  context: context,
                                  initialDate: DateTime.now(),
                                  firstDate: DateTime(1900),
                                  lastDate: DateTime.now(),
                                );
                                if (pickedDate != null) {
                                  dobController.text = "${pickedDate.day}-${pickedDate.month}-${pickedDate.year}";
                                  _calculateAge(pickedDate);
                                }
                              },
                            ),
                          ),
                          const SizedBox(width: 3.0),
                          Expanded(
                            flex: 1,
                            child: TextField(
                              controller: ageController,
                              readOnly: true,
                              textAlign: TextAlign.center,
                              style: const TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold, height: 2.2), // üîπ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ
                              decoration: InputDecoration(
                                isDense: true, // üîπ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
                                filled: true,
                                fillColor: Colors.blue[50],
                                contentPadding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0), // üîπ ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ
                                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
                                suffixText: "‡¶¨‡¶õ‡¶∞  ",
                                suffixStyle: const TextStyle(fontSize: 14.0, color: Colors.black), // ‚úÖ ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶ï‡¶∞‡¶æ
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 3.0),
                      Row(
                        children: [
                          Expanded(
                            flex: 3, // ‚úÖ ‡¶á-‡¶Æ‡ßá‡¶á‡¶≤ ‡ß≠‡ß´% ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶®‡ßá‡¶¨‡ßá
                            child: _buildTextField(label: '‡¶á-‡¶Æ‡ßá‡¶á‡¶≤', hint: '‡¶á-‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                          ),
                          const SizedBox(width: 3.0), // ‚úÖ ‡¶¶‡ßÅ‡¶á ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ó‡ßç‡¶Ø‡¶æ‡¶™
                          Expanded(
                            flex: 1, // ‚úÖ ‡¶∞‡¶ï‡ßç‡¶§‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡ß®‡ß´% ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶®‡ßá‡¶¨‡ßá
                            child: _buildTextField(label: '‡¶∞‡¶ï‡ßç‡¶§‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™', hint: 'A+/B+/O+/AB+'),

                          ),
                        ],
                      ),
                      const SizedBox(height: 3.0),
                      const Text("‡¶Ö‡¶∏‡¶ö‡ßç‡¶õ‡¶≤ ‡¶π‡¶≤‡ßá‡¶É ", style: TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold)),
                      Row(
                        children: [
                          Expanded(child: _buildCheckbox("‡¶è‡¶§‡¶ø‡¶Æ", isEtim, (val) => setState(() => isEtim = val!))),
                          Expanded(child: _buildCheckbox("‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡ßÄ", isProtibondhi, (val) => setState(() => isProtibondhi = val!))),
                          Expanded(child: _buildCheckbox("‡¶ó‡¶∞‡ßÄ‡¶¨", isGorib, (val) => setState(() => isGorib = val!))),
                          ],
                      ),
                    ],
                  ),
                ),
              ),
            ),

            const SizedBox(width: 0.01),

            // ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶ï‡¶≤‡¶æ‡¶Æ
            Expanded(
              child: Card(
                elevation: 4.0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // ‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
                      Row(
                        children: [
                          // ‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ (‡ß´‡ß¶%)
                          Expanded(
                            flex: 1,
                            child: _buildTextField(label: '‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ', hint: '‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                          ),
                          // ‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡ß´‡ß¶%)
                          Expanded(
                            flex: 1,
                            child: _buildTextField(label: '‡¶´‡ßã‡¶®', hint: '‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                          ),
                        ],
                      ),
                      Row(
                        children: [
                          // ‡¶™‡¶ø‡¶§‡¶æ‡¶∞ NID (‡ß≠‡ß´%)
                          Expanded(
                            flex: 2,
                            child: _buildTextField(label: 'NID', hint: '‡¶™‡¶ø‡¶§‡¶æ‡¶∞ NID ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞'),
                          ),
                          // ‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ (‡ß®‡ß´%)
                          Expanded(
                            flex: 2,
                            child: _buildTextField(label: '‡¶™‡ßá‡¶∂‡¶æ', hint: '‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ'),
                          ),
                        ],
                      ),

                      // ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
                      Row(
                        children: [
                          // ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ (‡ß´‡ß¶%)
                          Expanded(
                            flex: 1,
                            child: _buildTextField(label: '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ', hint: '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                          ),
                          // ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡ß´‡ß¶%)
                          Expanded(
                            flex: 1,
                            child: _buildTextField(label: '‡¶´‡ßã‡¶®', hint: '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'),
                          ),
                        ],
                      ),
                      Row(
                        children: [
                          // ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ NID (‡ß≠‡ß´%)
                          Expanded(
                            flex: 2,
                            child: _buildTextField(label: 'NID', hint: '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ NID ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞'),
                          ),
                          // ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ (‡ß®‡ß´%)
                          Expanded(
                            flex: 2,
                            child: _buildTextField(label: '‡¶™‡ßá‡¶∂‡¶æ', hint: '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ'),
                          ),
                        ],
                      ),
                      // ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡¶™‡ßÅ‡¶∞‡ßã ‡¶∞‡ßã)
                      _buildTextField(label: '‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞', hint: '‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞(‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)'),

                      // üîπ ‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï, ‡¶Ö‡¶®‡¶æ‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï, ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü (‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶®)
                      Row(
                        children: [
                          Expanded(child: _buildRadio("‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï", "‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï")),
                          Expanded(child: _buildRadio("‡¶Ö‡¶®‡¶æ‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï", "‡¶Ö‡¶®‡¶æ‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï")),
                          // Expanded(child: _buildRadio("‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü", "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü")),
                        ],
                      ),

                      const SizedBox(height: 5.0),

                      // üîπ ‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï ‡¶π‡¶≤‡ßá ‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                      if (residenceType == "‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï") ...[
                        _buildTextField(label: "‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ", hint: "‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"),
                        _buildTextField(label: "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï", hint: "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"),
                        _buildTextField(label: "‡¶´‡ßã‡¶®", hint: "‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡ßá‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"),
                      ],
                    ],
                  ),
                ),
              ),
            ),

            const SizedBox(width: 0.01),

            // ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶ï‡¶≤‡¶æ‡¶Æ (‡¶°‡¶æ‡¶®‡ßá‡¶∞ ‡¶ï‡¶≤‡¶æ‡¶Æ)
            Expanded(
              child: Card(
                elevation: 4.0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      AddressFormContainer(),

                      SizedBox(height: 5.0),
                      FormButtons(), // ‚úÖ FormButtons ‡¶†‡¶ø‡¶ï ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
                    ],
                  ),
                ),
              ),
            ),

          ],
        ),
      ),
    );
  }

  Widget _buildTextField({required String label, required String hint}) {
    return Padding(
      padding:
          const EdgeInsets.symmetric(vertical: 4.0), // üîπ ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá
      child: SizedBox(
        height: 38, // üîπ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ (‡¶ï‡¶Æ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®)
        child: TextField(
          style: const TextStyle(
              fontSize: 14.0, height: 1.0), // üîπ ‡¶´‡¶®‡ßç‡¶ü ‡¶õ‡ßã‡¶ü ‡¶ì ‡¶ï‡¶Æ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
          decoration: InputDecoration(
            labelText: label,
            filled: true,
            fillColor: Colors.blue[50],
            hintText: hint,
            contentPadding: const EdgeInsets.symmetric(
                vertical: 8.0, horizontal: 10.0), // üîπ ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶°‡¶ø‡¶Ç ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10.0),
              borderSide: const BorderSide(color: Colors.blue),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(4.0),
              borderSide: const BorderSide(color: Colors.blue),
            ),
          ),
        ),
      ),
    );
  }
}
